#!/bin/bash

# Script para executar todos os testes do projeto
# Uso: ./run-tests.sh [opcoes]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes de output
print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Configurar vari√°veis de ambiente para testes
export DATABASE_URL="file::memory:?cache=shared"
export JWT_SECRET="test-jwt-secret-for-testing-only"
export LOG_LEVEL="error"

# Verificar se Go est√° instalado
if ! command -v go &> /dev/null; then
    print_error "Go n√£o est√° instalado ou n√£o est√° no PATH"
    exit 1
fi

print_header "Iniciando execu√ß√£o dos testes"
echo "Go version: $(go version)"
echo "Database: $DATABASE_URL"
echo ""

# Limpar cache de testes
print_header "Limpando cache de testes"
go clean -testcache
print_success "Cache limpo"
echo ""

# Verificar formata√ß√£o do c√≥digo
print_header "Verificando formata√ß√£o do c√≥digo"
UNFORMATTED=$(gofmt -l .)
if [ -n "$UNFORMATTED" ]; then
    print_error "Arquivos n√£o formatados encontrados:"
    echo "$UNFORMATTED"
    print_warning "Execute: go fmt ./..."
    exit 1
fi
print_success "C√≥digo est√° formatado corretamente"
echo ""

# Executar go vet
print_header "Executando an√°lise est√°tica (go vet)"
if go vet ./...; then
    print_success "An√°lise est√°tica passou"
else
    print_error "An√°lise est√°tica falhou"
    exit 1
fi
echo ""

# Executar testes unit√°rios
print_header "Executando testes unit√°rios"
if CGO_ENABLED=0 go test ./pkg/... ./internal/app/services/... -v -coverprofile=unit-coverage.out; then
    print_success "Testes unit√°rios passaram"
else
    print_error "Testes unit√°rios falharam"
    exit 1
fi
echo ""

# Executar testes de integra√ß√£o
print_header "Executando testes de integra√ß√£o"
if CGO_ENABLED=0 go test ./tests/integration/... -v -coverprofile=integration-coverage.out; then
    print_success "Testes de integra√ß√£o passaram"
else
    print_error "Testes de integra√ß√£o falharam"
    exit 1
fi
echo ""

# Executar todos os testes com cobertura
print_header "Executando todos os testes com cobertura"
if CGO_ENABLED=0 go test ./... -v -coverprofile=coverage.out -covermode=atomic; then
    print_success "Todos os testes passaram"
else
    print_error "Alguns testes falharam"
    exit 1
fi
echo ""

# Verificar cobertura de c√≥digo
print_header "Verificando cobertura de c√≥digo"
COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
echo "Cobertura total: ${COVERAGE}%"

# Verificar se atende o m√≠nimo de 80%
COVERAGE_NUM=$(echo "$COVERAGE" | sed 's/%//')
if (( $(echo "$COVERAGE_NUM < 80.0" | bc -l) )); then
    print_error "Cobertura abaixo do m√≠nimo (80%): ${COVERAGE}%"
    exit 1
fi
print_success "Cobertura aprovada: ${COVERAGE}%"
echo ""

# Gerar relat√≥rio HTML de cobertura
print_header "Gerando relat√≥rio HTML de cobertura"
go tool cover -html=coverage.out -o coverage.html
print_success "Relat√≥rio gerado: coverage.html"
echo ""

# Executar benchmarks
print_header "Executando benchmarks"
go test ./pkg/roll/... -bench=. -benchmem -run=^$ > benchmark-results.txt
print_success "Benchmarks executados - resultados em benchmark-results.txt"
echo ""

# Mostrar resumo dos arquivos gerados
print_header "Arquivos gerados"
echo "üìä coverage.out - Dados de cobertura"
echo "üìä unit-coverage.out - Cobertura dos testes unit√°rios"
echo "üìä integration-coverage.out - Cobertura dos testes de integra√ß√£o"
echo "üìä coverage.html - Relat√≥rio HTML de cobertura"
echo "üìä benchmark-results.txt - Resultados dos benchmarks"
echo ""

print_success "Todos os testes foram executados com sucesso!"
print_success "Cobertura de c√≥digo: ${COVERAGE}%"

# Abrir relat√≥rio HTML se estiver em ambiente desktop
if command -v xdg-open &> /dev/null; then
    print_warning "Abrindo relat√≥rio de cobertura no navegador..."
    xdg-open coverage.html
elif command -v open &> /dev/null; then
    print_warning "Abrindo relat√≥rio de cobertura no navegador..."
    open coverage.html
fi
